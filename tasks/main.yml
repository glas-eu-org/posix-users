---
- name: read organisation variables
  import_tasks: "{{ role_path }}/../org.eu.glas.common-organisations-variables/tasks/main.yml"
  tags:
  - posix-users

- name: create or modify enabled user (/etc/passwd,/etc/shadow)
  user: >
   name={{ item.name }} 
   comment="{{ item.posix_users_gecos|default(item.firstname|default(omit) + ' ' + item.lastname|default(omit)) }}"
   shell={{ item.posix_users_shell|default('/bin/bash') }}
   password={{ item.posix_users_password_hash|default('x') }}
   update_password={{ item.posix_users_password_hash_update|default('on_create') }}
   createhome=yes 
   home={{ item.posix_users_homedirectory|default(posix_users_homedir) }}
   uid={{ item.posix_uid|default(omit) }}
  with_items: '{{common_users_accounts}}'
  register: posix_users_enabled_user
  when: (item.disabled|default('false')|bool==False and (item.posix_users_password_hash is defined or item.posix_users_ssh_authorized_keys|default('')|length > 0) and item.name != ansible_user_id|default("") and not posix_users_group_update_only|default(false)|bool and not posix_users_skip_create_or_modify|default(false)|bool) and posix_users_up2date == false and (( item.lastname is defined and item.firstname is defined) or item.posix_users_gecos is defined)
  become: true
  tags:
  - posix-users

- name: get list of available users (/etc/passwd)
  shell: >
     getent passwd|cut -d: -f1|sed 's/\(^\|$\)/\"/g'
  when: 'posix_users_up2date == false'
  become: False
  register: posix_users_available_users
  changed_when: False
  check_mode: no
  tags:
  - posix-users
  
- name: create or modify disabled user (/etc/passwd,/etc/shadow)
  user: >
   name={{ item.name }} 
   comment="{{ item.posix_users_gecos|default('User disabled by ansible') }}" 
   shell={{ item.shell|default('/bin/false') }} 
   password="!!" 
   update_password=always
   createhome=yes
   home={{ item.posix_users_homedirectory|default(posix_users_homedir) }}
  with_items: '{{common_users_accounts}}'
  register: posix_users_disabled_user
  when: (item.disabled|default('false')|bool==True and '"' + item.name + '"' in posix_users_available_users.stdout_lines|default('') and (item.posix_users_password_hash is defined or item.posix_users_ssh_authorized_keys|default('')|length > 0) and item.name != ansible_user_id|default("") and not posix_users_group_update_only|default(false)|bool and not posix_users_skip_create_or_modify|default(false)|bool) and posix_users_up2date == false
  become: true
  tags:
  - posix-users

- name: create group with same name as user (/etc/group)
  group: >
   name={{ item.name }} 
  with_items: '{{common_users_accounts}}'
  when: (item.disabled|default('false')|bool==False and not posix_users_group_update_only|default(false)|bool and (item.posix_users_password_hash is defined or item.posix_users_ssh_authorized_keys|default('')|length > 0) and not posix_users_skip_create_group_with_same_name|default(false)|bool) and posix_users_up2date == false
  become: true
  tags:
  - posix-users
 
- name: create or modify home directory subtree (~/)
  file: >
   path=~{{ item[0].name }}/{{ item[1] }} 
   state=directory
   mode=0750
   owner={{ item[0].name }}
  become: true
  when: ('"' + item.0.name + '"' in posix_users_available_users.stdout_lines|default('') and not posix_users_group_update_only|default(false)|bool and not posix_users_skip_create_home_directory_subtree|default(false)|bool) and posix_users_up2date == false
  with_nested: 
  - '{{common_users_accounts}}'
  - [ 'tmp', 'bin', 'etc', '.ssh' ]
  tags:
  - posix-users

- name: create or modify home directory subtree (~/) additional groups
  group: >
   name={{ item.1.group|default(omit) }}
  become: true
  when: (item.0.disabled|default('false')|bool==False and not posix_users_group_update_only|default(false)|bool and not posix_users_skip_create_home_directory_subtree|default(false)|bool) and posix_users_up2date == false and item.1.group is defined
  with_subelements: 
  - '{{common_users_accounts}}'
  - posix_users_file
  - flags:
    skip_missing: True
  tags:
  - posix-users

- name: create or modify home directory subtree (~/) for additional directories/files
  file: >
   path={% if item.1.path is defined %}~{{ item.0.name }}/{{ item.1.path }}{% else %}{{ omit }}{% endif %}
   dest={{ item.1.dest|default(omit) }}
   state={{ item.1.state|default("file") }}
   mode={{ item.1.mode|default("0750") }}
   owner={{ item.1.owner|default(item.0.name) }}
   group={{ item.1.group|default(omit) }}
   force={{ item.1.force|default(omit) }}
   follow={{ item.1.follow|default(omit) }}
   recurse={{ item.1.recurse|default(omit) }}
   selevel={{ item.1.selevel|default(omit) }}
   serole={{ item.1.serole|default(omit) }}
   setype={{ item.1.setype|default(omit) }}
   seuser={{ item.1.setype|default(omit) }}
   src={{ item.1.src|default(omit) }}
   unsafe_writes={{ item.1.unsafe_writes|default(omit) }}
  become: true
  when: (item.0.disabled|default('false')|bool==False and not posix_users_group_update_only|default(false)|bool and not posix_users_skip_create_home_directory_subtree|default(false)|bool) and posix_users_up2date == false
  with_subelements: 
  - '{{common_users_accounts}}'
  - posix_users_file
  - flags:
    skip_missing: True
  tags:
  - posix-users

- name: create or modify home directory subtree (~/) for additional templates
  template: >
   src={{ item.1.src }}
   dest=~{{ item.0.dest }}/{{ item.1.dest }} 
   backup={{ item.1.backup|default("no") }}
   mode={{ item.1.owner|default("0750") }}
   owner={{ item.1.owner|default(item.0.name) }}
   group={{ item.1.group|default(omit) }}
   force={{ item.1.force|default(omit) }}
   selevel={{ item.1.selevel|default(omit) }}
   serole={{ item.1.serole|default(omit) }}
   setype={{ item.1.setype|default(omit) }}
   seuser={{ item.1.setype|default(omit) }}
   validate={{ item.1.validate|default(omit) }}
   unsafe_writes={{ item.1.unsafe_writes|default(omit) }}
  become: true
  when: (item.0.disabled|default('false')|bool==False item.1.src is defined and not posix_users_group_update_only|default(false)|bool and not posix_users_skip_create_home_directory_subtree|default(false)|bool) and posix_users_up2date == false
  with_subelements: 
  - '{{common_users_accounts}}'
  - posix_users_template
  - flags:
    skip_missing: True
  tags:
  - posix-users

- name: create bind mount src directories (~/)
  file: >
   path={{ item.1.src|default(omit) }}
   state=directory
   recurse=yes
  become: true
  when: (not posix_users_group_update_only|default(false)|bool and not posix_users_skip_create_home_directory_subtree|default(false)|bool) and posix_users_up2date == false and item.1.opts|default("bind") == "bind"
  with_subelements: 
  - '{{common_users_accounts}}'
  - posix_users_mountpoint
  - flags:
    skip_missing: True
  tags:
  - posix-users

  
  
- name: create or modify home bind mounts (~/)
  mount: >
   path={% if item.1.path is defined %}~{{ item.0.name }}/{{ item.1.path }}{% else %}{{ omit }}{% endif %}
   name={{ item.1.name|default(omit) }}
   state={% if item.0.disabled %}absent{% else %}mounted{% endif %}
   src={{ item.1.src|default(omit) }}
   passno={{ item.1.passno|default(omit) }}
   opts={{ item.1.opts|default("bind") }}
   fstype={{ item.1.fstype|default("none") }}
   dump={{ item.1.dump|default(omit) }}
   boot={{ item.1.boot|default(true) }}
  become: true
  when: (not posix_users_group_update_only|default(false)|bool and not posix_users_skip_create_home_directory_subtree|default(false)|bool) and posix_users_up2date == false
  with_subelements: 
  - '{{common_users_accounts}}'
  - posix_users_mountpoint
  - flags:
    skip_missing: True
  tags:
  - posix-users

- name: install rssh chroot helper
  template: src=chroot-setup-helper.sh.j2 dest={{ posix_user_chroot_setup_helper_path }} mode="u=rx,g=,o="
  become: true
  tags:
  - posix-users

- name: add rssh to /etc/shells
  lineinfile: dest=/etc/shells state=present regexp="^{{ posix_users_rssh_path }}$" line="{{ posix_users_rssh_path }}"
  become: true
  tags:
  - posix-users

- name: create or modify home directory subtree (~/) add chroot files
  shell: >
   {{ posix_user_chroot_setup_helper_path }} {{ item.0.posix_user_chroot }} {{ item.1 }}
  become: true
  when: ('"' + item.0.name + '"' in posix_users_available_users.stdout_lines|default('') and item.1 is defined and not posix_users_group_update_only|default(false)|bool and not posix_users_skip_create_home_directory_subtree|default(false)|bool) and posix_users_up2date == false
  with_subelements: 
  - '{{common_users_accounts}}'
  - posix_user_chroot_files
  - flags:
    skip_missing: True
  tags:
  - posix-users

- name: forward email to user (~/.forward)
  lineinfile: >
   dest=~{{ item.name }}/.forward 
   create=yes
   regexp='.*'
   line={{ item.email }}
   state=present
  become: true
  with_items: '{{common_users_accounts}}'
  when: ('"' + item.name + '"' in posix_users_available_users.stdout_lines|default('') and item.email is defined and not posix_users_group_update_only|default(false)|bool and (item.posix_users_password_hash is defined or item.posix_users_ssh_authorized_keys|default('')|length > 0) and not posix_users_skip_forward_email_to_user|default(false)|bool) and posix_users_up2date == false
  tags:
  - posix-users
  
- name: add ssh key for authorized and enabled users (~/.ssh/ssh_authorized_keys)
  become: true
  with_items: '{{common_users_accounts}}'
  when: ('"' + item.name + '"' in posix_users_available_users.stdout_lines|default('') and item.disabled|default('false')|bool==false and not posix_users_group_update_only|default(false)|bool and item.posix_users_ssh_authorized_keys|default('')|length > 0 and not posix_users_skip_add_ssh_key_for_authorized_users|default(false)|bool) and posix_users_up2date == false
  authorized_key: >
    exclusive=yes
    key="{{ item.posix_users_ssh_authorized_keys|join("\n") }}" user="{{ item.name }}"
  tags:
  - posix-users
  - posix-users-ssh-keys

- name: disable ssh key for disabled users (~/.ssh/ssh_authorized_keys2)
  become: true
  with_nested: 
  - '{{common_users_accounts}}'
  - [ '.ssh/authorized_keys', '.ssh/authorized_keys2' ]
  when: ('"' + item[0].name + '"' in posix_users_available_users.stdout_lines|default('') and item[0].disabled|default('false')|bool==true and not posix_users_group_update_only|default(false)|bool and (item[0].posix_users_password_hash is defined or item[0].posix_users_ssh_authorized_keys|default('')|length > 0) and not posix_users_skip_add_ssh_key_for_authorized_users|default(false)|bool) and posix_users_up2date == false
  file: path="{{ '~' + item[0].name| expanduser  }}/{{ item[1] }}" state=absent
  tags:
  - posix-users
  - posix-users-ssh-keys

- name: add ssh key for authorized users (~/.ssh/ssh_authorized_keys2)
  become: true
  with_items: '{{common_users_accounts}}'
  when: ('"' + item.name + '"' in posix_users_available_users.stdout_lines|default('') and not posix_users_group_update_only|default(false)|bool and (item.posix_users_password_hash is defined or item.posix_users_ssh_authorized_keys|default('')|length > 0) and not posix_users_skip_add_ssh_key_for_authorized_users|default(false)|bool) and posix_users_up2date == false
  template: >
    src=authorized_keys2.ansible-template.j2
    dest="{{ '~' + item.name| expanduser  }}/.ssh/authorized_keys2"
    mode=0400 owner="{{ item.name }}" group={{ item.name }} backup="yes"
  tags:
  - posix-users
  - posix-users-ssh-keys

- name: make sure users have sudo permission (/etc/sudoers)
  with_items: '{{common_users_accounts}}'
  become: true
  lineinfile: > 
   dest=/etc/sudoers 
   state=present 
   regexp='^(%)?{{ item.name }} .*' 
   line='{{ item.name }} {{ item.posix_users_sudo_line }}' 
   validate='/usr/sbin/visudo -cf %s'
  when: ('"' + item.name + '"' in posix_users_available_users.stdout_lines|default('') and item.posix_users_sudo_line is defined and (item.posix_users_password_hash is defined or item.posix_users_ssh_authorized_keys|default('')|length > 0) and not posix_users_group_update_only|default(false)|bool and not posix_users_skip_sudoers|default(false)|bool) and posix_users_up2date == false
  tags:
  - posix-users

- name: get list of available groups (/etc/groups)
  shell: 'getent group|cut -d: -f1|grep -E "({{ item.posix_users_groups|join("|")}})" | tr "\n" ","'
  when: ('"' + item.name + '"' in posix_users_available_users.stdout_lines|default('') and item.posix_users_groups is defined ) and posix_users_up2date == false
  become: False
  register: posix_users_available_groups
  changed_when: False
  check_mode: no
  with_items: '{{common_users_accounts}}'
  tags:
  - posix-users

 
- name: add users to available groups (/etc/groups)
  user: > 
   name={{ item.item.name }} 
   groups={{ item.stdout }}
  with_items: '{{posix_users_available_groups.results}}'
  when: ('"' + item.item.name + '"' in posix_users_available_users.stdout_lines|default('') and item.stdout is defined and posix_users_available_groups.results is defined and not posix_users_skip_group_update|default(false)|bool) and (item.item.posix_users_password_hash is defined or item.item.posix_users_ssh_authorized_keys|default('')|length > 0)  and posix_users_up2date == false
  notify:
   - register ansible_ssh_user used for this machine
   - restart ssh multiplexer
  become: true
  tags:
  - posix-users
  
- name: check if groups were added after updating /etc/passwd
  shell: "find /etc/group -newer /etc/passwd|grep /etc/group"
  register: posix_users_passwd_newer_then_group
  when: posix_users_disabled_user is defined and posix_users_enabled_user is defined and posix_users_up2date == false
  changed_when: 'posix_users_passwd_newer_then_group.rc == 0 or posix_users_disabled_user|changed or posix_users_enabled_user|changed'
  failed_when: "'ERROR' in posix_users_passwd_newer_then_group.stderr"
  notify:
   - get list of available groups (/etc/groups)
   - add users to available groups (/etc/groups)
   - update /etc/passwd timestamp
  tags:
   - posix-users

- name: make sure we update users only once per playbook run
  set_fact: 
    posix_users_up2date: true
  tags:
   - posix-users
   
- name: Display all variables/facts known for a host
  debug: var=hostvars[inventory_hostname] verbosity=4
  tags:
   - posix-users  
